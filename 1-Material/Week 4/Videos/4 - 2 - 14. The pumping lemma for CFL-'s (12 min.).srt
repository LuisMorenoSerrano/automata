1
00:00:00,860 --> 00:00:01,970
There is a pumping lemma for

2
00:00:01,970 --> 00:00:05,530
context free languages, analogous to
the pumping lemma for regular languages.

3
00:00:06,690 --> 00:00:08,250
The goal of this lecture is to state and

4
00:00:08,250 --> 00:00:11,940
prove this lemma, which is naturally more
complicated than the pumping lemma for

5
00:00:11,940 --> 00:00:16,530
regular languages, and then use it to show
certain languages are not context free.

6
00:00:18,380 --> 00:00:20,820
Let's review the pumping lemma for
regular languages.

7
00:00:22,275 --> 00:00:25,320
It's said that any sufficiently long
string w, in a regular language,

8
00:00:25,320 --> 00:00:29,930
has some short non-empty piece near
the beginning that we could pump.

9
00:00:29,930 --> 00:00:34,490
That is, we could repeat it as many times
as we liked, including zero times, and

10
00:00:34,490 --> 00:00:36,550
the resulting string would
also be in the language.

11
00:00:38,210 --> 00:00:40,320
We found the string to pump by looking for

12
00:00:40,320 --> 00:00:45,220
the first state to repeat, as a finite
automaton process, that's input w.

13
00:00:45,220 --> 00:00:49,120
The pumping lemma for
context-free languages says that we

14
00:00:49,120 --> 00:00:54,490
can find two pieces in any long string z,
and pump them in tandem.

15
00:00:54,490 --> 00:00:56,960
That is,
we can repeat each of them I times for

16
00:00:56,960 --> 00:01:02,050
any I greater than zero, and
the result will be in the same language.

17
00:01:02,050 --> 00:01:05,930
We'll also see that these two
strings are close together in z, and

18
00:01:05,930 --> 00:01:07,740
one can be empty but not both.

19
00:01:09,040 --> 00:01:12,520
Here's the statement of the pumping
lemma for context-free languages.

20
00:01:12,520 --> 00:01:15,720
We can see it as the same sort of
game with an adversary that we

21
00:01:15,720 --> 00:01:18,296
talked about in connection
with regular languages.

22
00:01:18,296 --> 00:01:23,840
For every context-free language L,
that is you get to pick L,

23
00:01:23,840 --> 00:01:27,090
Presumably the one you want to
show isn't really context free.

24
00:01:28,380 --> 00:01:29,240
There is an integer n.

25
00:01:29,240 --> 00:01:32,660
This is something the adversary
gets to pick, but

26
00:01:32,660 --> 00:01:35,460
once it's picked, it's fixed for
the rest of the game.

27
00:01:37,520 --> 00:01:40,226
Such that for
every string z in L of length at least n.

28
00:01:41,860 --> 00:01:44,960
And here you get to
pick the z to focus on.

29
00:01:47,030 --> 00:01:52,560
You can break z into five pieces, u, v,
w, y, such that three things are true.

30
00:01:53,720 --> 00:01:56,170
The adversary gets to
pick out z is broken, but

31
00:01:56,170 --> 00:01:59,060
subject to two constraints
we'll see in just a moment.

32
00:02:00,090 --> 00:02:03,430
And incidentally, v and
x are the sub strings that get pumped.

33
00:02:05,140 --> 00:02:09,610
The first constraint is that the middle
three components, v, w,and x are short.

34
00:02:09,610 --> 00:02:12,440
No longer than the length
of n put together.

35
00:02:13,600 --> 00:02:15,380
Remember that V and X will get pumped.

36
00:02:15,380 --> 00:02:17,770
So that says no only are they short, but

37
00:02:17,770 --> 00:02:20,880
they appear within a bounded
distance from each other within z.

38
00:02:22,130 --> 00:02:25,830
The second condition that
the adversary has to respect,

39
00:02:27,350 --> 00:02:31,090
is that v and x cannot both be empty,
although one can.

40
00:02:32,240 --> 00:02:35,940
And if all the above is satisfied and
L really is context free, then for

41
00:02:35,940 --> 00:02:39,465
all integers i equal to or greater than 0.

42
00:02:39,465 --> 00:02:44,080
UV to the i, WX to the i, Y is also an L.

43
00:02:44,080 --> 00:02:48,490
We win the game and prove L is not
context-free by allowing the adversaries

44
00:02:48,490 --> 00:02:52,740
choices of n and the breakup of z
subject to the constraints one and two.

45
00:02:52,740 --> 00:02:58,900
And then picking an I such that UV to
the i a WX to the i Y is not an L.

46
00:03:00,440 --> 00:03:01,800
The proof of the pumping Lemma for

47
00:03:01,800 --> 00:03:05,570
context relanguages starts with
the Tromsky normal form grammar for L.

48
00:03:06,600 --> 00:03:08,870
Technically it is for L minus epsilon but

49
00:03:08,870 --> 00:03:12,320
the empty string will never be in the
condition of being of length at least n so

50
00:03:12,320 --> 00:03:14,200
it's presence or absence doesn't matter.

51
00:03:16,440 --> 00:03:19,610
The CNF grammar has invariable's for
some m.

52
00:03:20,860 --> 00:03:23,560
So we're going to let n be 2 to the m.

53
00:03:25,710 --> 00:03:27,710
And now let's consider any strings z and

54
00:03:27,710 --> 00:03:31,360
l of length at least n,
that's 2 to the m again.

55
00:03:31,360 --> 00:03:34,980
We're going to prove first that any
parse tree in a CNF grammar for

56
00:03:34,980 --> 00:03:40,790
string z of length at
least n equals 2 to the m.

57
00:03:40,790 --> 00:03:45,880
Must have a path of length m plus 2 or
more, from the root to a leaf.

58
00:03:48,140 --> 00:03:51,740
We'll actually prove the contra positive,
that is,

59
00:03:51,740 --> 00:03:57,820
suppose there's a parse tree z,
with no path longer than m plus 1.

60
00:03:57,820 --> 00:04:03,010
Such a path as m nodes, labelled by
variables at the top, or the beginning.

61
00:04:03,010 --> 00:04:07,920
And one node labelled by a terminal at
the end, that is, here is a typical path.

62
00:04:09,370 --> 00:04:15,270
It will have variables here, here,
and here and then a terminal there.

63
00:04:15,270 --> 00:04:17,930
Okay, if we forget about
the terminals at the leaves,

64
00:04:17,930 --> 00:04:20,560
a parse tree in the CNF
grammar is a binary tree.

65
00:04:21,820 --> 00:04:25,380
Thus at each level the number
of nodes can at most double.

66
00:04:25,380 --> 00:04:27,910
Thus there is only one node
at the top level, the root,

67
00:04:27,910 --> 00:04:33,350
and there can be only two nodes at
the next level, four at the third,

68
00:04:33,350 --> 00:04:36,576
and, and eight at the fourth, and so on.

69
00:04:36,576 --> 00:04:43,450
In general, there will be at most two of 2
to the power m minus 1 at the nth level.

70
00:04:47,140 --> 00:04:50,740
But this tree has at most
m levels with variables.

71
00:04:50,740 --> 00:04:52,440
And then along each path of variables,

72
00:04:52,440 --> 00:04:55,420
the last variable has one child
with a terminal as its label.

73
00:04:56,500 --> 00:04:59,820
The largest number of leaves
occur if all the paths in

74
00:04:59,820 --> 00:05:02,760
the tree have exactly m variables.

75
00:05:02,760 --> 00:05:06,028
If some paths determinate before
level m there will be fewer leaves.

76
00:05:06,028 --> 00:05:10,568
Thus there are at most two to the m
minus one nodes that are labeled by

77
00:05:10,568 --> 00:05:14,475
variables and
have a single child with a terminal label.

78
00:05:14,475 --> 00:05:15,161
And thus there are at most 2 to the m

79
00:05:15,161 --> 00:05:16,110
minus 1 nodes that
are labeled by variables and

80
00:05:16,110 --> 00:05:17,834
has a single with a terminal label and
thus they are 2 to the m minus 1 leaves.

81
00:05:19,330 --> 00:05:24,490
Finally, we therefore can conclude
that the length of the yield is at

82
00:05:24,490 --> 00:05:27,810
most 2 to the m minus power m minus 1.

83
00:05:27,810 --> 00:05:33,020
Now 2 of the power m minus 1 is n over 2.

84
00:05:33,020 --> 00:05:36,670
Since z is of length n it can not
be the yield of any tree that had

85
00:05:36,670 --> 00:05:40,650
paths limited to length m plus 1 or less.

86
00:05:40,650 --> 00:05:43,120
Therefore we conclude that
somewhere on the parse tree for

87
00:05:43,120 --> 00:05:46,540
z is a length of at least m plus 2.

88
00:05:46,540 --> 00:05:48,160
Now we're ready to proof
the pumping lemma.

89
00:05:49,480 --> 00:05:54,700
We just proved that z's parse tree
has a length of at least m+2.

90
00:05:54,700 --> 00:05:58,390
Only the last node in any path
can be labeled by a terminal so

91
00:05:58,390 --> 00:06:01,595
there are at least m+1 nodes
with variables along this path.

92
00:06:01,595 --> 00:06:06,842
[SOUND] Let's focus on one of the longest
paths in the parse tree for z.

93
00:06:06,842 --> 00:06:10,837
Surely there are at least m+1
variables along this longest path.

94
00:06:10,837 --> 00:06:15,238
[SOUND] Remember that m is the number
of variables of the grammar.

95
00:06:15,238 --> 00:06:21,010
So along this path there are two low nodes
labeled by the same variable,l call it A.

96
00:06:22,020 --> 00:06:24,120
In fact,
to make sure we pump short pieces,

97
00:06:24,120 --> 00:06:27,890
let's look only at the bottommost m
plus one variables along this path,

98
00:06:27,890 --> 00:06:30,770
which could be much
longer than m plus one.

99
00:06:30,770 --> 00:06:32,565
And we know that two of
them must be the same.

100
00:06:32,565 --> 00:06:37,183
[SOUND] On the next slide we'll see
what the parse tree must look like.

101
00:06:37,183 --> 00:06:39,200
Here's a picture of the parse tree for z.

102
00:06:40,935 --> 00:06:43,400
We've show the path we're focused on, and

103
00:06:43,400 --> 00:06:45,610
the lowest competing
variables along that path.

104
00:06:46,680 --> 00:06:49,290
The purple tree is rooted at the lower A,

105
00:06:49,290 --> 00:06:54,760
and the yellow tree with the purple tree
within it, is rooted at the upper A.

106
00:06:54,760 --> 00:06:56,430
The W be the yield with the purple.

107
00:06:56,430 --> 00:06:56,930
Tree.

108
00:06:58,590 --> 00:07:02,490
V and x are the portions of the yield
of the yellow tree that precede and

109
00:07:02,490 --> 00:07:04,040
follow W respectively.

110
00:07:05,190 --> 00:07:10,050
And let u and y be the portions of z that
precede v and follow x respectively.

111
00:07:11,200 --> 00:07:12,810
Let's look at the yellow.

112
00:07:12,810 --> 00:07:14,930
Since the path shown is
as long as any other.

113
00:07:14,930 --> 00:07:17,950
And that path has at most m+1 variables.

114
00:07:17,950 --> 00:07:21,340
We know by the lemma 1
that we just proved,

115
00:07:21,340 --> 00:07:27,780
that the yield of the yellow plus purple
is no longer than 2 to the power m, or n.

116
00:07:27,780 --> 00:07:34,690
That is, the length of VWX is no more
than n.But V and X both can't be empty.

117
00:07:34,690 --> 00:07:35,710
Why?

118
00:07:35,710 --> 00:07:40,120
That's a useful property of kind of,
the Chomsky normal form grammars.

119
00:07:40,120 --> 00:07:43,600
Since the two A's shown in
the tree are different nodes,

120
00:07:43,600 --> 00:07:47,890
the upper A must have a child to
the left or right of the path shown.

121
00:07:47,890 --> 00:07:51,410
That's a consequence of the fact that
we eliminated unit production so

122
00:07:51,410 --> 00:07:53,270
all bodies that have variables.

123
00:07:53,270 --> 00:07:55,470
Have at least two of them.

124
00:07:55,470 --> 00:08:00,150
Moreover, once we have a variable autonoma
path there are no epsilon productions so

125
00:08:00,150 --> 00:08:04,310
we must generate from this
variable at least one terminal.

126
00:08:04,310 --> 00:08:07,000
That is all we need to
conclude that either V or X or

127
00:08:07,000 --> 00:08:08,370
both have length at least one.

128
00:08:08,370 --> 00:08:12,860
Now we can take advantage of the fact
that we have two A's along the path,

129
00:08:12,860 --> 00:08:14,220
we can get rid.

130
00:08:14,220 --> 00:08:19,630
Of v and x by pumping zero times, that is,
we know the purple tree can substitute for

131
00:08:19,630 --> 00:08:23,320
the yellow, because both trees have
the same variable, a, at the root.

132
00:08:24,620 --> 00:08:28,290
If the original on the left satisfies
the conditions of a parsed tree, that is,

133
00:08:28,290 --> 00:08:32,600
every interior node is the head of
a production whose body is the labels of

134
00:08:32,600 --> 00:08:33,940
its children.

135
00:08:33,940 --> 00:08:37,230
Then the same will be true of
the smaller parse tree on the right.

136
00:08:37,230 --> 00:08:42,580
We conclude that u, w,
y is also in the language.

137
00:08:42,580 --> 00:08:43,500
Or we could pump twice.

138
00:08:43,500 --> 00:08:48,300
That is replace the purple tree by the
yellow, which has the purple within it.

139
00:08:48,300 --> 00:08:53,039
And you get a parse tree whose yield is u,
v, v, w, x, x, y.

140
00:08:55,140 --> 00:08:58,190
And in the previous tree representing
pumping twice we could again

141
00:08:58,190 --> 00:09:03,120
replace the purple tree by the yellow and
get a bigger tree whose yield is u,

142
00:09:03,120 --> 00:09:06,530
three v's, w, three x's, and then y.

143
00:09:06,530 --> 00:09:09,140
In the same manner we
can get parse trees for

144
00:09:09,140 --> 00:09:11,078
all strings with the form u, v to the i.

145
00:09:11,078 --> 00:09:16,110
iwx the iy for any integer i equal to or
greater than zero.

146
00:09:16,110 --> 00:09:19,280
These strings are therefore
all in the language L.

147
00:09:19,280 --> 00:09:22,110
That proves the pumping lemma for
context free languages.

148
00:09:23,680 --> 00:09:26,240
Let's look at an example of
how the pumping lemma can be

149
00:09:26,240 --> 00:09:28,600
used to show a language
not to be context free.

150
00:09:31,030 --> 00:09:33,940
This language which involves
matching the counts of two blocks of

151
00:09:33,940 --> 00:09:34,490
zeros is context free.

152
00:09:36,010 --> 00:09:38,540
A grammar or PDA for
it is easy to construct.

153
00:09:41,370 --> 00:09:46,840
The idea is very much like what we saw for
the line of zero to the n, one to the n.

154
00:09:48,260 --> 00:09:50,490
But give the language
three blocks of zeros,

155
00:09:50,490 --> 00:09:52,890
all of which must be the same length.

156
00:09:52,890 --> 00:09:55,760
And we're suddenly outside what
context three grammars can do.

157
00:09:57,830 --> 00:10:01,240
We can prove that using the pumping
lemma for context free languages.

158
00:10:03,020 --> 00:10:08,650
So I'll pick this language, L, and
the adversary now gets to pick N.

159
00:10:08,650 --> 00:10:11,670
We don't know N, but we do know it
is fixed for the rest of the game.

160
00:10:14,870 --> 00:10:21,570
We get to pick Z so let's pick zero to the
N one, zero to the N n one zero to the n.

161
00:10:21,570 --> 00:10:25,940
That is each block of zeros is of length
equal to whatever n the adversary picked.

162
00:10:28,800 --> 00:10:32,840
Now the adversary gets to break
our z up into z equals uvwxy.

163
00:10:32,840 --> 00:10:39,816
But it must choose these substrings such
that vwx together are no longer than n.

164
00:10:41,340 --> 00:10:44,800
And v and x cannot both be
picked to be the empty string.

165
00:10:47,100 --> 00:10:50,400
There are two cases depending upon
whether the adversary picks v and

166
00:10:50,400 --> 00:10:51,400
x to have zeros or not.

167
00:10:52,420 --> 00:10:56,540
In the first case suppose there
are no zeros among v and x.

168
00:10:56,540 --> 00:10:59,540
And since they cannot both be empty
there must be at least one 1 among.

169
00:11:00,830 --> 00:11:05,150
But then if we pump zero
times to get the string uwy,

170
00:11:05,150 --> 00:11:10,040
we know that there is at
most one 1 in this string.

171
00:11:10,040 --> 00:11:13,230
The pumping lemma claims it
is in the language L, but

172
00:11:13,230 --> 00:11:16,560
it can't be because all strings
in L have exactly two 1s.

173
00:11:18,120 --> 00:11:21,274
In the second and last case,
v and x have at least one 0.

174
00:11:23,760 --> 00:11:30,050
Vwx has length at most n, so these three
substrings cannot extend from the first

175
00:11:30,050 --> 00:11:35,650
block of zeros to the last, because
n+2 positions separate those blocks.

176
00:11:38,580 --> 00:11:44,950
So again consider uwy which if l
is context free, he must be in l.

177
00:11:44,950 --> 00:11:50,070
Removing vnx must leave at least one
of the three blocks of n 0's intact so

178
00:11:50,070 --> 00:11:51,040
it still has n 0's.

179
00:11:52,450 --> 00:11:54,740
But vnx have at least one 0,

180
00:11:54,740 --> 00:11:59,440
so in uwy at least one of
the blocks of 0's has fewer than n.

181
00:11:59,440 --> 00:12:00,110
N zeroes.

182
00:12:01,710 --> 00:12:03,130
We conclude that in this case too,

183
00:12:03,130 --> 00:12:07,990
uwy cannot be an L, and
thus L cannot be context free.

